# Generated by Django 3.0.8 on 2021-11-07 09:56

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Counter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20)),
                ('count', models.IntegerField()),
            ],
            options={
                'permissions': [('rest_list_counter', 'Can list in REST'), ('rest_retrieve_counter', 'Can retrieve in REST'), ('rest_create_counter', 'Can create in REST'), ('rest_update_counter', 'Can update in REST'), ('rest_destroy_counter', 'Can delete in REST')],
            },
        ),
        migrations.CreateModel(
            name='Criterium',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('upper_limit', models.DurationField()),
                ('score', models.IntegerField()),
                ('base', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name_plural': 'Criteria',
                'permissions': [('rest_list_criterium', 'Can list in REST'), ('rest_retrieve_criterium', 'Can retrieve in REST'), ('rest_create_criterium', 'Can create in REST'), ('rest_update_criterium', 'Can update in REST'), ('rest_destroy_criterium', 'Can delete in REST')],
            },
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30)),
                ('score', models.IntegerField(default=0)),
            ],
            options={
                'permissions': [('rest_list_group', 'Can list in REST'), ('rest_retrieve_group', 'Can retrieve in REST'), ('rest_create_group', 'Can create in REST'), ('rest_update_group', 'Can update in REST'), ('rest_destroy_group', 'Can delete in REST'), ('rest_top_groups_group', 'Can view top groups in REST')],
            },
        ),
        migrations.CreateModel(
            name='HappyHour',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20)),
                ('start_time', models.DateTimeField()),
                ('end_time', models.DateTimeField()),
                ('multiplier', models.IntegerField(default=1)),
                ('base', models.BooleanField(default=False)),
            ],
            options={
                'permissions': [('rest_list_happyhour', 'Can list in REST'), ('rest_retrieve_happyhour', 'Can retrieve in REST'), ('rest_create_happyhour', 'Can create in REST'), ('rest_update_happyhour', 'Can update in REST'), ('rest_destroy_happyhour', 'Can delete in REST')],
            },
        ),
        migrations.CreateModel(
            name='Shift',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20)),
                ('start_time', models.DateTimeField()),
                ('end_time', models.DateTimeField()),
            ],
            options={
                'permissions': [('rest_list_shift', 'Can list in REST'), ('rest_retrieve_shift', 'Can retrieve in REST'), ('rest_create_shift', 'Can create in REST'), ('rest_update_shift', 'Can update in REST'), ('rest_destroy_shift', 'Can delete in REST'), ('rest_no_shift_after_shift', 'Can list all runners who have no shifter after specific time'), ('rest_list_runners_shift', 'Can list all runners in a specific shift')],
            },
        ),
        migrations.CreateModel(
            name='University',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('full_name', models.CharField(max_length=30)),
                ('abbreviation', models.CharField(max_length=5)),
            ],
            options={
                'verbose_name_plural': 'Universities',
                'permissions': [('rest_list_university', 'Can list in REST'), ('rest_retrieve_university', 'Can retrieve in REST'), ('rest_create_university', 'Can create in REST'), ('rest_update_university', 'Can update in REST'), ('rest_destroy_university', 'Can delete in REST')],
            },
        ),
        migrations.CreateModel(
            name='Runner',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=30)),
                ('last_name', models.CharField(max_length=30)),
                ('identification', models.CharField(max_length=8, unique=True, validators=[django.core.validators.RegexValidator('^r[0-9]{7}$', 'This is not a valid university identification number.')])),
                ('registration_time', models.DateTimeField(blank=True)),
                ('test_time', models.DurationField(blank=True, null=True)),
                ('group', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='competition.Group')),
                ('shifts', models.ManyToManyField(blank=True, to='competition.Shift')),
                ('university', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='competition.University')),
            ],
            options={
                'permissions': [('rest_list_runner', 'Can list in REST'), ('rest_retrieve_runner', 'Can retrieve in REST'), ('rest_create_runner', 'Can create in REST'), ('rest_update_runner', 'Can update in REST'), ('rest_destroy_runner', 'Can delete in REST'), ('rest_top_runners_runner', 'Can view top runners in REST'), ('rest_most_active_runner', 'Can view most active runners in REST')],
            },
        ),
        migrations.CreateModel(
            name='QueueTicket',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('registration_time', models.DateTimeField(blank=True)),
                ('deleted', models.BooleanField(default=False)),
                ('ran', models.BooleanField(default=False)),
                ('runner', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='competition.Runner')),
            ],
            options={
                'permissions': [('rest_list_queueticket', 'Can list in REST'), ('rest_retrieve_queueticket', 'Can retrieve in REST'), ('rest_create_queueticket', 'Can create in REST'), ('rest_update_queueticket', 'Can update in REST'), ('rest_destroy_queueticket', 'Can delete in REST'), ('rest_move_queueticket', 'Can move a ticket in REST')],
            },
        ),
        migrations.CreateModel(
            name='Lap',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_time', models.DateTimeField(blank=True, null=True)),
                ('duration', models.DurationField(blank=True, null=True)),
                ('runner', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='competition.Runner')),
                ('ticket', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.PROTECT, to='competition.QueueTicket')),
            ],
            options={
                'permissions': [('rest_list_lap', 'Can list in REST'), ('rest_retrieve_lap', 'Can retrieve in REST'), ('rest_create_lap', 'Can create in REST'), ('rest_update_lap', 'Can update in REST'), ('rest_destroy_lap', 'Can delete in REST'), ('rest_advance_lap', 'Can advance a lap in REST'), ('rest_reverse_lap', 'Can reverse a lap in REST'), ('rest_lap_count_lap', 'Can retrieve lap count in REST')],
            },
        ),
        migrations.AddField(
            model_name='group',
            name='happy_hours',
            field=models.ManyToManyField(blank=True, to='competition.HappyHour'),
        ),
    ]
